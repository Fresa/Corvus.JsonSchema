//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Corvus.Json.Patch.SpecGenerator
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Corvus.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct Scenario : IJsonObject<Scenario>, IEquatable<Scenario>
    {
        /// <summary>
        /// JSON property name for <see cref = "Doc"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> DocUtf8JsonPropertyName = new byte[]{100, 111, 99};
        /// <summary>
        /// JSON property name for <see cref = "Doc"/>.
        /// </summary>
        public static readonly string DocJsonPropertyName = "doc";
        /// <summary>
        /// JSON property name for <see cref = "Patch"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PatchUtf8JsonPropertyName = new byte[]{112, 97, 116, 99, 104};
        /// <summary>
        /// JSON property name for <see cref = "Patch"/>.
        /// </summary>
        public static readonly string PatchJsonPropertyName = "patch";
        /// <summary>
        /// JSON property name for <see cref = "Comment"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> CommentUtf8JsonPropertyName = new byte[]{99, 111, 109, 109, 101, 110, 116};
        /// <summary>
        /// JSON property name for <see cref = "Comment"/>.
        /// </summary>
        public static readonly string CommentJsonPropertyName = "comment";
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public Scenario(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public Scenario(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public Scenario(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/> from which to construct the value.</param>
        public Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioCommon conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/> from which to construct the value.</param>
        public Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioWithResult conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/> from which to construct the value.</param>
        public Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioWithError conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Scenario"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/> from which to construct the value.</param>
        public Scenario(Corvus.Json.Patch.SpecGenerator.DisabledScenario conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/>.
        /// </summary>
        public Corvus.Json.Patch.SpecGenerator.ScenarioCommon AsScenarioCommon
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/>.
        /// </summary>
        public bool IsScenarioCommon
        {
            get
            {
                return ((Corvus.Json.Patch.SpecGenerator.ScenarioCommon)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/>.
        /// </summary>
        public Corvus.Json.Patch.SpecGenerator.ScenarioWithResult AsScenarioWithResult
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/>.
        /// </summary>
        public bool IsScenarioWithResult
        {
            get
            {
                return ((Corvus.Json.Patch.SpecGenerator.ScenarioWithResult)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/>.
        /// </summary>
        public Corvus.Json.Patch.SpecGenerator.ScenarioWithError AsScenarioWithError
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/>.
        /// </summary>
        public bool IsScenarioWithError
        {
            get
            {
                return ((Corvus.Json.Patch.SpecGenerator.ScenarioWithError)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/>.
        /// </summary>
        public Corvus.Json.Patch.SpecGenerator.DisabledScenario AsDisabledScenario
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/>.
        /// </summary>
        public bool IsDisabledScenario
        {
            get
            {
                return ((Corvus.Json.Patch.SpecGenerator.DisabledScenario)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets Doc.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonAny Doc
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(DocJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(DocUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonAny(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Patch.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonAny Patch
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(PatchJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PatchUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonAny(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Comment.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonString Comment
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(CommentJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(CommentUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioCommon value)
        {
            return new Scenario(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.SpecGenerator.ScenarioCommon(Scenario value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.SpecGenerator.ScenarioCommon(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioWithResult value)
        {
            return new Scenario(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.SpecGenerator.ScenarioWithResult(Scenario value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.SpecGenerator.ScenarioWithResult(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioWithError value)
        {
            return new Scenario(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.SpecGenerator.ScenarioWithError(Scenario value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.SpecGenerator.ScenarioWithError(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(Corvus.Json.Patch.SpecGenerator.DisabledScenario value)
        {
            return new Scenario(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.SpecGenerator.DisabledScenario(Scenario value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.SpecGenerator.DisabledScenario(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.NotDisabled"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(Corvus.Json.Patch.SpecGenerator.NotDisabled value)
        {
            return (Corvus.Json.Patch.SpecGenerator.Scenario)value;
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.NotDisabled"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.SpecGenerator.NotDisabled(Scenario value)
        {
            return (Corvus.Json.Patch.SpecGenerator.Scenario)value;
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new Scenario(value.AsJsonElement);
            }

            return value.As<Scenario>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(Scenario value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(JsonObject value)
        {
            return new Scenario(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(Scenario value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(Scenario value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Scenario(ImmutableDictionary<string, JsonAny> value)
        {
            return new Scenario(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(Scenario lhs, Scenario rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(Scenario lhs, Scenario rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Scenario"/>.
        /// </summary>
        public static Scenario Create(Corvus.Json.JsonAny doc, Corvus.Json.JsonAny patch, Corvus.Json.JsonString? comment = null)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            builder.Add(DocJsonPropertyName, doc);
            builder.Add(PatchJsonPropertyName, patch);
            if (comment is Corvus.Json.JsonString comment__)
            {
                builder.Add(CommentJsonPropertyName, comment__);
            }

            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets doc.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Scenario WithDoc(Corvus.Json.JsonAny value)
        {
            return this.SetProperty(DocJsonPropertyName, value);
        }

        /// <summary>
        /// Sets patch.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Scenario WithPatch(Corvus.Json.JsonAny value)
        {
            return this.SetProperty(PatchJsonPropertyName, value);
        }

        /// <summary>
        /// Sets comment.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Scenario WithComment(Corvus.Json.JsonString value)
        {
            return this.SetProperty(CommentJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is IJsonValue jv)
            {
                return this.Equals(jv.AsAny);
            }

            return obj is null && this.IsNull();
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.GetHashCode(),
                JsonValueKind.Array => this.AsArray().GetHashCode(),
                JsonValueKind.Number => this.AsNumber().GetHashCode(),
                JsonValueKind.String => this.AsString().GetHashCode(),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(),
                JsonValueKind.Null => JsonNull.NullHashCode,
                _ => JsonAny.UndefinedHashCode,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString().Equals(other.AsString()),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(Scenario other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString().Equals(other.AsString()),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public Scenario SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Scenario SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Scenario SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Scenario RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Scenario RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Scenario RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<Scenario, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateOneOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            int oneOfCount = 0;
            ValidationContext oneOfResult0 = this.As<Corvus.Json.Patch.SpecGenerator.ScenarioWithResult>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult0.IsValid)
            {
                result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
            }

            ValidationContext oneOfResult1 = this.As<Corvus.Json.Patch.SpecGenerator.ScenarioWithError>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult1.IsValid)
            {
                result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
            }

            ValidationContext oneOfResult2 = this.As<Corvus.Json.Patch.SpecGenerator.DisabledScenario>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult2.IsValid)
            {
                result = result.MergeChildContext(oneOfResult2, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
            }

            if (oneOfCount == 1)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
                }
            }
            else if (oneOfCount == 0)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            ValidationContext allOfResult0 = this.As<Corvus.Json.Patch.SpecGenerator.ScenarioCommon>().Validate(validationContext.CreateChildContext(), level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            return result;
        }
    }
}