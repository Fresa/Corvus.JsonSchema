//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft202012;
public readonly partial struct Schema
{
    public readonly partial struct DependenciesValue
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct AdditionalPropertiesEntity
        {
            /// <inheritdoc/>
            public AdditionalPropertiesEntity Add(in JsonAny item1)
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                builder.Add(item1);
                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public AdditionalPropertiesEntity Add<TItem1>(in TItem1 item1)
                where TItem1 : struct, IJsonValue<TItem1>
            {
                return this.Add(item1.AsAny);
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity Add(in JsonAny item1, in JsonAny item2)
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                builder.Add(item1);
                builder.Add(item2);
                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public AdditionalPropertiesEntity Add<TItem1, TItem2>(in TItem1 item1, in TItem2 item2)
                where TItem1 : struct, IJsonValue<TItem1> where TItem2 : struct, IJsonValue<TItem2>
            {
                return this.Add(item1.AsAny, item2.AsAny);
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity Add<TItem>(params TItem[] items)
                where TItem : struct, IJsonValue<TItem>
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                foreach (TItem item in items)
                {
                    builder.Add(item.AsAny);
                }

                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity Add(params JsonAny[] items)
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                builder.AddRange(items);
                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity AddRange<TArray>(in TArray items)
                where TArray : struct, IJsonArray<TArray>
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                foreach (JsonAny item in items.EnumerateArray())
                {
                    builder.Add(item.AsAny);
                }

                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity AddRange<TItem>(IEnumerable<TItem> items)
                where TItem : struct, IJsonValue<TItem>
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                foreach (TItem item in items)
                {
                    builder.Add(item.AsAny);
                }

                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity AddRange(IEnumerable<JsonAny> items)
            {
                ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
                builder.AddRange(items);
                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity Insert(int index, in JsonAny item1)
            {
                return new(this.GetImmutableListWith(index, item1));
            }

            /// <inheritdoc/>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public AdditionalPropertiesEntity Insert<TItem1>(int index, in TItem1 item1)
                where TItem1 : struct, IJsonValue<TItem1>
            {
                return this.Insert(index, item1.AsAny);
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity InsertRange<TArray>(int index, in TArray items)
                where TArray : struct, IJsonArray<TArray>
            {
                return new(this.GetImmutableListWith(index, items.EnumerateArray()));
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity InsertRange<TItem>(int index, IEnumerable<TItem> items)
                where TItem : struct, IJsonValue<TItem>
            {
                return new(this.GetImmutableListWith(index, items.Select(item => item.AsAny)));
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity InsertRange(int index, IEnumerable<JsonAny> items)
            {
                return new(this.GetImmutableListWith(index, items));
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity Replace<TItem>(in TItem oldValue, in TItem newValue)
                where TItem : struct, IJsonValue
            {
                return this.GetImmutableListReplacing(oldValue.AsAny, newValue.AsAny);
            }

            /// <inheritdoc/>
            public AdditionalPropertiesEntity SetItem<TItem>(int index, in TItem value)
                where TItem : struct, IJsonValue
            {
                return this.GetImmutableListSetting(index, value.AsAny);
            }
        }
    }
}