//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft7;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Format
{
    private static readonly ImmutableDictionary<JsonPropertyName, PropertyValidator<Format>> __CorvusLocalProperties = CreateLocalPropertyValidators();
    /// <summary>
    /// JSON property name for <see cref = "Format1"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> Format1Utf8JsonPropertyName = new byte[]{102, 111, 114, 109, 97, 116};
    /// <summary>
    /// JSON property name for <see cref = "Format1"/>.
    /// </summary>
    public const string Format1JsonPropertyName = "format";
    /// <summary>
    /// Gets Format1.
    /// </summary>
    public Corvus.Json.JsonString Format1
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(Format1Utf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(Format1JsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Format"/>.
    /// </summary>
    public static Format Create(Corvus.Json.JsonString? format1 = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        if (format1 is Corvus.Json.JsonString format1__)
        {
            builder.Add(Format1JsonPropertyName, format1__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets format.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Format WithFormat1(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(Format1JsonPropertyName, value);
    }

    private static ImmutableDictionary<JsonPropertyName, PropertyValidator<Format>> CreateLocalPropertyValidators()
    {
        ImmutableDictionary<JsonPropertyName, PropertyValidator<Format>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, PropertyValidator<Format>>();
        builder.Add(Format1JsonPropertyName, __CorvusValidateFormat1);
        return builder.ToImmutable();
    }

    private static ValidationContext __CorvusValidateFormat1(in Format that, in ValidationContext validationContext, ValidationLevel level)
    {
        Corvus.Json.JsonString property = that.Format1;
        return property.Validate(validationContext, level);
    }
}