//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.Model;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct PatchOperation
{
    private static readonly ImmutableDictionary<JsonPropertyName, PropertyValidator<PatchOperation>> __CorvusLocalProperties = CreateLocalPropertyValidators();
    /// <summary>
    /// JSON property name for <see cref = "Path"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PathUtf8JsonPropertyName = new byte[]{112, 97, 116, 104};
    /// <summary>
    /// JSON property name for <see cref = "Path"/>.
    /// </summary>
    public const string PathJsonPropertyName = "path";
    /// <summary>
    /// JSON property name for <see cref = "Op"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> OpUtf8JsonPropertyName = new byte[]{111, 112};
    /// <summary>
    /// JSON property name for <see cref = "Op"/>.
    /// </summary>
    public const string OpJsonPropertyName = "op";
    /// <summary>
    /// Gets Path.
    /// </summary>
    public Corvus.Json.JsonPointer Path
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PathUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonPointer(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PathJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonPointer>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Op.
    /// </summary>
    public Corvus.Json.JsonString Op
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OpUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OpJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "PatchOperation"/>.
    /// </summary>
    public static PatchOperation Create(Corvus.Json.JsonPointer path, Corvus.Json.JsonString op)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(PathJsonPropertyName, path.AsAny);
        builder.Add(OpJsonPropertyName, op.AsAny);
        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets path.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public PatchOperation WithPath(in Corvus.Json.JsonPointer value)
    {
        return this.SetProperty(PathJsonPropertyName, value);
    }

    /// <summary>
    /// Sets op.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public PatchOperation WithOp(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(OpJsonPropertyName, value);
    }

    private static ImmutableDictionary<JsonPropertyName, PropertyValidator<PatchOperation>> CreateLocalPropertyValidators()
    {
        ImmutableDictionary<JsonPropertyName, PropertyValidator<PatchOperation>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, PropertyValidator<PatchOperation>>();
        return builder.ToImmutable();
    }
}