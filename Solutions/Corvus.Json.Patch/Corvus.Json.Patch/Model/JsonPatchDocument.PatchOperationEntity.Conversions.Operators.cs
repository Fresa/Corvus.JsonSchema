//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.Model;
public readonly partial struct JsonPatchDocument
{
    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly partial struct PatchOperationEntity
    {
        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommonEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommonEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommonEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommonEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommonEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.MoveEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.MoveEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.MoveEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.MoveEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.MoveEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.CopyEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.CopyEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.CopyEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.CopyEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.CopyEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.TestEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperationEntity(Corvus.Json.Patch.Model.JsonPatchDocument.TestEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new((ImmutableDictionary<JsonPropertyName, JsonAny>)value),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.TestEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.TestEntity(PatchOperationEntity value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.TestEntity.Undefined;
        }
    }
}