//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Corvus.Json.Patch.Model
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Corvus.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct PatchOperation : IJsonObject<PatchOperation>, IEquatable<PatchOperation>
    {
        /// <summary>
        /// JSON property name for <see cref = "Path"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PathUtf8JsonPropertyName = new byte[]{112, 97, 116, 104};
        /// <summary>
        /// JSON property name for <see cref = "Path"/>.
        /// </summary>
        public static readonly string PathJsonPropertyName = "path";
        /// <summary>
        /// JSON property name for <see cref = "Op"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OpUtf8JsonPropertyName = new byte[]{111, 112};
        /// <summary>
        /// JSON property name for <see cref = "Op"/>.
        /// </summary>
        public static readonly string OpJsonPropertyName = "op";
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public PatchOperation(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public PatchOperation(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public PatchOperation(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.PatchOperationCommon conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.Add"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.Add conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.Remove"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.Remove conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.Replace"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.Replace conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.Move"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.Move conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.Copy"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.Copy conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "PatchOperation"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.Test"/> from which to construct the value.</param>
        public PatchOperation(Corvus.Json.Patch.Model.Test conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.PatchOperationCommon AsPatchOperationCommon
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        public bool IsPatchOperationCommon
        {
            get
            {
                return ((Corvus.Json.Patch.Model.PatchOperationCommon)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.Add"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.Add AsAdd
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.Add"/>.
        /// </summary>
        public bool IsAdd
        {
            get
            {
                return ((Corvus.Json.Patch.Model.Add)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.Remove"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.Remove AsRemove
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.Remove"/>.
        /// </summary>
        public bool IsRemove
        {
            get
            {
                return ((Corvus.Json.Patch.Model.Remove)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.Replace"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.Replace AsReplace
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.Replace"/>.
        /// </summary>
        public bool IsReplace
        {
            get
            {
                return ((Corvus.Json.Patch.Model.Replace)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.Move"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.Move AsMove
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.Move"/>.
        /// </summary>
        public bool IsMove
        {
            get
            {
                return ((Corvus.Json.Patch.Model.Move)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.Copy"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.Copy AsCopy
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.Copy"/>.
        /// </summary>
        public bool IsCopy
        {
            get
            {
                return ((Corvus.Json.Patch.Model.Copy)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.Test"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.Test AsTest
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.Test"/>.
        /// </summary>
        public bool IsTest
        {
            get
            {
                return ((Corvus.Json.Patch.Model.Test)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets Path.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonPointer Path
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(PathJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PathUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonPointer(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Op.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonString Op
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(OpJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(OpUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.PatchOperationCommon value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.PatchOperationCommon(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.PatchOperationCommon(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.Add"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.Add value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.Add"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.Add(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.Add(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.Remove"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.Remove value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.Remove"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.Remove(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.Remove(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.Replace"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.Replace value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.Replace"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.Replace(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.Replace(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.Move"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.Move value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.Move"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.Move(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.Move(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.Copy"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.Copy value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.Copy"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.Copy(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.Copy(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.Test"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.Test value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.Test"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.Test(PatchOperation value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.Test(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new PatchOperation(value.AsJsonElement);
            }

            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(PatchOperation value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(JsonObject value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(PatchOperation value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(PatchOperation value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(ImmutableDictionary<string, JsonAny> value)
        {
            return new PatchOperation(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(PatchOperation lhs, PatchOperation rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(PatchOperation lhs, PatchOperation rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "PatchOperation"/>.
        /// </summary>
        public static PatchOperation Create(Corvus.Json.JsonPointer path, Corvus.Json.JsonString op)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            builder.Add(PathJsonPropertyName, path);
            builder.Add(OpJsonPropertyName, op);
            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets path.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PatchOperation WithPath(Corvus.Json.JsonPointer value)
        {
            return this.SetProperty(PathJsonPropertyName, value);
        }

        /// <summary>
        /// Sets op.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public PatchOperation WithOp(Corvus.Json.JsonString value)
        {
            return this.SetProperty(OpJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is IJsonValue jv)
            {
                return this.Equals(jv.AsAny);
            }

            return obj is null && this.IsNull();
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.GetHashCode(),
                JsonValueKind.Array => this.AsArray().GetHashCode(),
                JsonValueKind.Number => this.AsNumber().GetHashCode(),
                JsonValueKind.String => this.AsString().GetHashCode(),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(),
                JsonValueKind.Null => JsonNull.NullHashCode,
                _ => JsonAny.UndefinedHashCode,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString().Equals(other.AsString()),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(PatchOperation other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString().Equals(other.AsString()),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public PatchOperation SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PatchOperation SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PatchOperation SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public PatchOperation RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PatchOperation RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public PatchOperation RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<PatchOperation, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext? validationContext = null, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext ?? ValidationContext.ValidContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateOneOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            int oneOfCount = 0;
            ValidationContext oneOfResult0 = this.As<Corvus.Json.Patch.Model.Add>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult0.IsValid)
            {
                result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
            }

            ValidationContext oneOfResult1 = this.As<Corvus.Json.Patch.Model.Remove>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult1.IsValid)
            {
                result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
            }

            ValidationContext oneOfResult2 = this.As<Corvus.Json.Patch.Model.Replace>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult2.IsValid)
            {
                result = result.MergeChildContext(oneOfResult2, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
            }

            ValidationContext oneOfResult3 = this.As<Corvus.Json.Patch.Model.Move>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult3.IsValid)
            {
                result = result.MergeChildContext(oneOfResult3, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult3);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult3);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult3);
                }
            }

            ValidationContext oneOfResult4 = this.As<Corvus.Json.Patch.Model.Copy>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult4.IsValid)
            {
                result = result.MergeChildContext(oneOfResult4, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult4);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult4);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult4);
                }
            }

            ValidationContext oneOfResult5 = this.As<Corvus.Json.Patch.Model.Test>().Validate(validationContext.CreateChildContext(), level);
            if (oneOfResult5.IsValid)
            {
                result = result.MergeChildContext(oneOfResult5, level >= ValidationLevel.Detailed);
                oneOfCount += 1;
                if (oneOfCount > 1 && level == ValidationLevel.Flag)
                {
                    result = result.WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult5);
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult5);
                }
                else
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult5);
                }
            }

            if (oneOfCount == 1)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
                }
            }
            else if (oneOfCount == 0)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            return result;
        }

        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            ValidationContext allOfResult0 = this.As<Corvus.Json.Patch.Model.PatchOperationCommon>().Validate(validationContext.CreateChildContext(), level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            return result;
        }
    }
}