//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Corvus.Json.Patch.Model
{
    using System;
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Text;
    using System.Text.Json;
    using System.Text.RegularExpressions;
    using Corvus.Json;

    /// <summary>
    /// A type generated from a JsonSchema specification.
    /// </summary>
    public readonly struct Add : IJsonObject<Add>, IEquatable<Add>
    {
        /// <summary>
        /// JSON property name for <see cref = "Value"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> ValueUtf8JsonPropertyName = new byte[]{118, 97, 108, 117, 101};
        /// <summary>
        /// JSON property name for <see cref = "Value"/>.
        /// </summary>
        public static readonly string ValueJsonPropertyName = "value";
        /// <summary>
        /// JSON property name for <see cref = "Path"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> PathUtf8JsonPropertyName = new byte[]{112, 97, 116, 104};
        /// <summary>
        /// JSON property name for <see cref = "Path"/>.
        /// </summary>
        public static readonly string PathJsonPropertyName = "path";
        /// <summary>
        /// JSON property name for <see cref = "Op"/>.
        /// </summary>
        public static readonly ReadOnlyMemory<byte> OpUtf8JsonPropertyName = new byte[]{111, 112};
        /// <summary>
        /// JSON property name for <see cref = "Op"/>.
        /// </summary>
        public static readonly string OpJsonPropertyName = "op";
        private static readonly ImmutableDictionary<string, PropertyValidator<Add>> __CorvusLocalProperties = CreateLocalPropertyValidators();
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableDictionary<string, JsonAny>? objectBacking;
        /// <summary>
        /// Initializes a new instance of the <see cref = "Add"/> struct.
        /// </summary>
        /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
        public Add(JsonElement value)
        {
            this.jsonElementBacking = value;
            this.objectBacking = default;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Add"/> struct.
        /// </summary>
        /// <param name = "value">A property dictionary.</param>
        public Add(ImmutableDictionary<string, JsonAny> value)
        {
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Add"/> struct.
        /// </summary>
        /// <param name = "jsonObject">The <see cref = "JsonObject"/> from which to construct the value.</param>
        public Add(JsonObject jsonObject)
        {
            if (jsonObject.HasJsonElement)
            {
                this.jsonElementBacking = jsonObject.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                this.objectBacking = jsonObject.AsPropertyDictionary;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref = "Add"/> struct.
        /// </summary>
        /// <param name = "conversion">The <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/> from which to construct the value.</param>
        public Add(Corvus.Json.Patch.Model.PatchOperationCommon conversion)
        {
            if (conversion.HasJsonElement)
            {
                this.jsonElementBacking = conversion.AsJsonElement;
                this.objectBacking = default;
            }
            else
            {
                this.jsonElementBacking = default;
                if (conversion.ValueKind == JsonValueKind.Object)
                {
                    this.objectBacking = conversion;
                }
                else
                {
                    this.objectBacking = default;
                }
            }
        }

        /// <summary>
        /// Gets the value as a <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        public Corvus.Json.Patch.Model.PatchOperationCommon AsPatchOperationCommon
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        public bool IsPatchOperationCommon
        {
            get
            {
                return ((Corvus.Json.Patch.Model.PatchOperationCommon)this).Validate().IsValid;
            }
        }

        /// <summary>
        /// Gets Value.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonAny Value
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(ValueJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(ValueUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonAny(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Path.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.JsonPointer Path
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(PathJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(PathUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.JsonPointer(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets Op.
        /// </summary>
        /// <remarks>
        /// {Property title}.
        /// {Property description}.
        /// </remarks>
        /// <example>
        /// {Property examples}.
        /// </example>
        public Corvus.Json.Patch.Model.Add.OpEntity Op
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
                {
                    if (properties.TryGetValue(OpJsonPropertyName, out JsonAny result))
                    {
                        return result;
                    }
                }

                if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
                {
                    if (this.jsonElementBacking.TryGetProperty(OpUtf8JsonPropertyName.Span, out JsonElement result))
                    {
                        return new Corvus.Json.Patch.Model.Add.OpEntity(result);
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this is backed by a JSON element.
        /// </summary>
        public bool HasJsonElement => this.objectBacking is null;
        /// <summary>
        /// Gets the value as a JsonElement.
        /// </summary>
        public JsonElement AsJsonElement
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return JsonObject.PropertiesToJsonElement(objectBacking);
                }

                return this.jsonElementBacking;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny>)
                {
                    return JsonValueKind.Object;
                }

                return this.jsonElementBacking.ValueKind;
            }
        }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonAny(objectBacking);
                }

                return new JsonAny(this.jsonElementBacking);
            }
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Add(Corvus.Json.Patch.Model.PatchOperationCommon value)
        {
            return new Add(value);
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.PatchOperationCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.PatchOperationCommon(Add value)
        {
            if (value.ValueKind == JsonValueKind.Object)
            {
                return new Corvus.Json.Patch.Model.PatchOperationCommon(value.AsObject);
            }

            return default;
        }

        /// <summary>
        /// Conversion from any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Add(JsonAny value)
        {
            if (value.HasJsonElement)
            {
                return new Add(value.AsJsonElement);
            }

            return value.As<Add>();
        }

        /// <summary>
        /// Conversion to any.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonAny(Add value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion from object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Add(JsonObject value)
        {
            return new Add(value);
        }

        /// <summary>
        /// Conversion to object.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator JsonObject(Add value)
        {
            return value.AsObject;
        }

        /// <summary>
        /// Implicit conversion to a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator ImmutableDictionary<string, JsonAny>(Add value)
        {
            return value.AsObject.AsPropertyDictionary;
        }

        /// <summary>
        /// Implicit conversion from a property dictionary.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Add(ImmutableDictionary<string, JsonAny> value)
        {
            return new Add(value);
        }

        /// <summary>
        /// Standard equality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are equal.</returns>
        public static bool operator ==(Add lhs, Add rhs)
        {
            return lhs.Equals(rhs);
        }

        /// <summary>
        /// Standard inequality operator.
        /// </summary>
        /// <param name = "lhs">The left hand side of the comparison.</param>
        /// <param name = "rhs">The right hand side of the comparison.</param>
        /// <returns>True if they are not equal.</returns>
        public static bool operator !=(Add lhs, Add rhs)
        {
            return !lhs.Equals(rhs);
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Add"/>.
        /// </summary>
        public static Add Create(Corvus.Json.JsonAny value, Corvus.Json.JsonPointer path)
        {
            var builder = ImmutableDictionary.CreateBuilder<string, JsonAny>();
            builder.Add(ValueJsonPropertyName, value);
            builder.Add(PathJsonPropertyName, path);
            builder.Add(OpJsonPropertyName, new Corvus.Json.Patch.Model.Add.OpEntity());
            return builder.ToImmutable();
        }

        /// <summary>
        /// Sets value.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Add WithValue(Corvus.Json.JsonAny value)
        {
            return this.SetProperty(ValueJsonPropertyName, value);
        }

        /// <summary>
        /// Sets path.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Add WithPath(Corvus.Json.JsonPointer value)
        {
            return this.SetProperty(PathJsonPropertyName, value);
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj is IJsonValue jv)
            {
                return this.Equals(jv.AsAny);
            }

            return obj is null && this.IsNull();
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            JsonValueKind valueKind = this.ValueKind;
            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.GetHashCode(),
                JsonValueKind.Array => this.AsArray().GetHashCode(),
                JsonValueKind.Number => this.AsNumber().GetHashCode(),
                JsonValueKind.String => this.AsString().GetHashCode(),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(),
                JsonValueKind.Null => JsonNull.NullHashCode,
                _ => JsonAny.UndefinedHashCode,
            };
        }

        /// <summary>
        /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
        /// </summary>
        /// <param name = "writer">The writer to which to write the object.</param>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
            {
                JsonObject.WriteProperties(objectBacking, writer);
                return;
            }

            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
                return;
            }

            writer.WriteNullValue();
        }

        /// <inheritdoc/>
        public JsonObjectEnumerator EnumerateObject()
        {
            return this.AsObject.EnumerateObject();
        }

        /// <inheritdoc/>
        public bool TryGetProperty(string name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(name, out value);
        }

        /// <inheritdoc/>
        public bool TryGetProperty(ReadOnlySpan<byte> utf8name, out JsonAny value)
        {
            return this.AsObject.TryGetProperty(utf8name, out value);
        }

        /// <inheritdoc/>
        public bool Equals<T>(T other)
            where T : struct, IJsonValue
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject()),
                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString().Equals(other.AsString()),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool Equals(Add other)
        {
            JsonValueKind valueKind = this.ValueKind;
            if (other.ValueKind != valueKind)
            {
                return false;
            }

            return valueKind switch
            {
                JsonValueKind.Object => this.AsObject.Equals(other.AsObject),
                JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                JsonValueKind.String => this.AsString().Equals(other.AsString()),
                JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                JsonValueKind.Null => true,
                _ => false,
            };
        }

        /// <inheritdoc/>
        public bool HasProperty(string name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name, out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name.ToString(), out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<char> name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(name.ToString(), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public bool HasProperty(ReadOnlySpan<byte> utf8name)
        {
            if (this.objectBacking is ImmutableDictionary<string, JsonAny> properties)
            {
                return properties.TryGetValue(System.Text.Encoding.UTF8.GetString(utf8name), out _);
            }

            if (this.jsonElementBacking.ValueKind == JsonValueKind.Object)
            {
                return this.jsonElementBacking.TryGetProperty(utf8name, out JsonElement _);
            }

            return false;
        }

        /// <inheritdoc/>
        public Add SetProperty<TValue>(string name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Add SetProperty<TValue>(ReadOnlySpan<char> name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Add SetProperty<TValue>(ReadOnlySpan<byte> utf8name, TValue value)
            where TValue : struct, IJsonValue
        {
            if (this.ValueKind == JsonValueKind.Object || this.ValueKind == JsonValueKind.Undefined)
            {
                return this.AsObject.SetProperty(utf8name, value);
            }

            return this;
        }

        /// <inheritdoc/>
        public Add RemoveProperty(string name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Add RemoveProperty(ReadOnlySpan<char> name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(name);
            }

            return this;
        }

        /// <inheritdoc/>
        public Add RemoveProperty(ReadOnlySpan<byte> utf8Name)
        {
            if (this.ValueKind == JsonValueKind.Object)
            {
                return this.AsObject.RemoveProperty(utf8Name);
            }

            return this;
        }

        /// <inheritdoc/>
        public T As<T>()
            where T : struct, IJsonValue
        {
            return this.As<Add, T>();
        }

        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level != ValidationLevel.Flag)
            {
                result = result.UsingStack();
            }

            JsonValueKind valueKind = this.ValueKind;
            result = this.ValidateAllOf(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = this.ValidateObject(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            return result;
        }

        /// <summary>
        /// Gets the value as a <see cref = "JsonObject"/>.
        /// </summary>
        private JsonObject AsObject
        {
            get
            {
                if (this.objectBacking is ImmutableDictionary<string, JsonAny> objectBacking)
                {
                    return new JsonObject(objectBacking);
                }

                return new JsonObject(this.jsonElementBacking);
            }
        }

        private static ImmutableDictionary<string, PropertyValidator<Add>> CreateLocalPropertyValidators()
        {
            ImmutableDictionary<string, PropertyValidator<Add>>.Builder builder = ImmutableDictionary.CreateBuilder<string, PropertyValidator<Add>>();
            builder.Add(ValueJsonPropertyName, __CorvusValidateValue);
            builder.Add(OpJsonPropertyName, __CorvusValidateOp);
            return builder.ToImmutable();
        }

        private static ValidationContext __CorvusValidateValue(in Add that, in ValidationContext validationContext, ValidationLevel level)
        {
            Corvus.Json.JsonAny property = that.Value;
            return property.Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateOp(in Add that, in ValidationContext validationContext, ValidationLevel level)
        {
            Corvus.Json.Patch.Model.Add.OpEntity property = that.Op;
            return property.Validate(validationContext, level);
        }

        private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                return result;
            }

            int propertyCount = 0;
            bool foundValue = false;
            bool foundOp = false;
            foreach (Property property in this.EnumerateObject())
            {
                string propertyName = property.Name;
                if (__CorvusLocalProperties.TryGetValue(propertyName, out PropertyValidator<Add>? propertyValidator))
                {
                    result = result.WithLocalProperty(propertyCount);
                    var propertyResult = propertyValidator(this, result.CreateChildContext(), level);
                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (ValueJsonPropertyName.Equals(propertyName))
                    {
                        foundValue = true;
                    }
                    else if (OpJsonPropertyName.Equals(propertyName))
                    {
                        foundOp = true;
                    }
                }

                propertyCount++;
            }

            if (!foundValue)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"value\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            if (!foundOp)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"6.5.3. required - required property \"op\" not present.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }

            return result;
        }

        private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
        {
            ValidationContext result = validationContext;
            ValidationContext allOfResult0 = this.As<Corvus.Json.Patch.Model.PatchOperationCommon>().Validate(validationContext.CreateChildContext(), level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            return result;
        }

        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly struct OpEntity : IJsonValue, IEquatable<OpEntity>
        {
            private static readonly OpEntity __CorvusConstValue = JsonAny.Parse("\"add\"");
            private readonly JsonElement jsonElementBacking;
            private readonly string? stringBacking;
            /// <summary>
            /// Initializes a new instance of the <see cref = "OpEntity"/> struct.
            /// </summary>
            public OpEntity()
            {
                this.jsonElementBacking = __CorvusConstValue.jsonElementBacking;
                this.stringBacking = __CorvusConstValue.stringBacking;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpEntity"/> struct.
            /// </summary>
            /// <param name = "value">The backing <see cref = "JsonElement"/>.</param>
            public OpEntity(JsonElement value)
            {
                this.jsonElementBacking = value;
                this.stringBacking = default;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpEntity"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpEntity(string value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpEntity"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpEntity(ReadOnlySpan<char> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = value.ToString();
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpEntity"/> struct.
            /// </summary>
            /// <param name = "value">A string value.</param>
            public OpEntity(ReadOnlySpan<byte> value)
            {
                this.jsonElementBacking = default;
                this.stringBacking = System.Text.Encoding.UTF8.GetString(value);
            }

            /// <summary>
            /// Initializes a new instance of the <see cref = "OpEntity"/> struct.
            /// </summary>
            /// <param name = "jsonString">The <see cref = "JsonString"/> from which to construct the value.</param>
            public OpEntity(JsonString jsonString)
            {
                if (jsonString.HasJsonElement)
                {
                    this.jsonElementBacking = jsonString.AsJsonElement;
                    this.stringBacking = default;
                }
                else
                {
                    this.jsonElementBacking = default;
                    this.stringBacking = jsonString;
                }
            }

            /// <summary>
            /// Gets a value indicating whether this is backed by a JSON element.
            /// </summary>
            public bool HasJsonElement => this.stringBacking is null;
            /// <summary>
            /// Gets the value as a JsonElement.
            /// </summary>
            public JsonElement AsJsonElement
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return JsonString.StringToJsonElement(stringBacking);
                    }

                    return this.jsonElementBacking;
                }
            }

            /// <inheritdoc/>
            public JsonValueKind ValueKind
            {
                get
                {
                    if (this.stringBacking is string)
                    {
                        return JsonValueKind.String;
                    }

                    return this.jsonElementBacking.ValueKind;
                }
            }

            /// <inheritdoc/>
            public JsonAny AsAny
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonAny(stringBacking);
                    }

                    return new JsonAny(this.jsonElementBacking);
                }
            }

            /// <summary>
            /// Conversion from any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpEntity(JsonAny value)
            {
                if (value.HasJsonElement)
                {
                    return new OpEntity(value.AsJsonElement);
                }

                return value.As<OpEntity>();
            }

            /// <summary>
            /// Conversion to any.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonAny(OpEntity value)
            {
                return value.AsAny;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpEntity(string value)
            {
                return new OpEntity(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator string (OpEntity value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpEntity(ReadOnlySpan<char> value)
            {
                return new OpEntity(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<char>(OpEntity value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from utf8 bytes.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpEntity(ReadOnlySpan<byte> value)
            {
                return new OpEntity(value);
            }

            /// <summary>
            /// Conversion to utf8 bytes.
            /// </summary>
            /// <param name = "value">The number from which to convert.</param>
            public static implicit operator ReadOnlySpan<byte>(OpEntity value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Conversion from string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator OpEntity(JsonString value)
            {
                return new OpEntity(value);
            }

            /// <summary>
            /// Conversion to string.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonString(OpEntity value)
            {
                return value.AsString;
            }

            /// <summary>
            /// Standard equality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are equal.</returns>
            public static bool operator ==(OpEntity lhs, OpEntity rhs)
            {
                return lhs.Equals(rhs);
            }

            /// <summary>
            /// Standard inequality operator.
            /// </summary>
            /// <param name = "lhs">The left hand side of the comparison.</param>
            /// <param name = "rhs">The right hand side of the comparison.</param>
            /// <returns>True if they are not equal.</returns>
            public static bool operator !=(OpEntity lhs, OpEntity rhs)
            {
                return !lhs.Equals(rhs);
            }

            /// <inheritdoc/>
            public override string ToString()
            {
                return this.Serialize();
            }

            /// <inheritdoc/>
            public override bool Equals(object? obj)
            {
                if (obj is IJsonValue jv)
                {
                    return this.Equals(jv.AsAny);
                }

                return obj is null && this.IsNull();
            }

            /// <inheritdoc/>
            public override int GetHashCode()
            {
                JsonValueKind valueKind = this.ValueKind;
                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject().GetHashCode(),
                    JsonValueKind.Array => this.AsArray().GetHashCode(),
                    JsonValueKind.Number => this.AsNumber().GetHashCode(),
                    JsonValueKind.String => this.AsString.GetHashCode(),
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean().GetHashCode(),
                    JsonValueKind.Null => JsonNull.NullHashCode,
                    _ => JsonAny.UndefinedHashCode,
                };
            }

            /// <summary>
            /// Writes the object to the <see cref = "Utf8JsonWriter"/>.
            /// </summary>
            /// <param name = "writer">The writer to which to write the object.</param>
            public void WriteTo(Utf8JsonWriter writer)
            {
                if (this.stringBacking is string stringBacking)
                {
                    writer.WriteStringValue(stringBacking);
                    return;
                }

                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                    return;
                }

                writer.WriteNullValue();
            }

            /// <inheritdoc/>
            public bool Equals<T>(T other)
                where T : struct, IJsonValue
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject().Equals(other.AsObject()),
                    JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                    JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                    JsonValueKind.String => this.AsString.Equals(other.AsString()),
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                    _ => false,
                };
            }

            /// <inheritdoc/>
            public bool Equals(OpEntity other)
            {
                JsonValueKind valueKind = this.ValueKind;
                if (other.ValueKind != valueKind)
                {
                    return false;
                }

                return valueKind switch
                {
                    JsonValueKind.Object => this.AsObject().Equals(other.AsObject()),
                    JsonValueKind.Array => this.AsArray().Equals(other.AsArray()),
                    JsonValueKind.Number => this.AsNumber().Equals(other.AsNumber()),
                    JsonValueKind.String => this.AsString.Equals(other.AsString),
                    JsonValueKind.True or JsonValueKind.False => this.AsBoolean().Equals(other.AsBoolean()),
                    JsonValueKind.Null => true,
                    _ => false,
                };
            }

            /// <inheritdoc/>
            public T As<T>()
                where T : struct, IJsonValue
            {
                return this.As<OpEntity, T>();
            }

            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level != ValidationLevel.Flag)
                {
                    result = result.UsingStack();
                }

                result = Corvus.Json.Validate.ValidateConst(this, result, level, __CorvusConstValue);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                return result;
            }

            /// <summary>
            /// Gets the value as a <see cref = "JsonString"/>.
            /// </summary>
            private JsonString AsString
            {
                get
                {
                    if (this.stringBacking is string stringBacking)
                    {
                        return new JsonString(stringBacking);
                    }

                    return new JsonString(this.jsonElementBacking);
                }
            }
        }
    }
}