//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.Model;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Replace
{
    private static readonly ImmutableDictionary<JsonPropertyName, PropertyValidator<Replace>> __CorvusLocalProperties = CreateLocalPropertyValidators();
    /// <summary>
    /// JSON property name for <see cref = "Value"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ValueUtf8JsonPropertyName = new byte[]{118, 97, 108, 117, 101};
    /// <summary>
    /// JSON property name for <see cref = "Value"/>.
    /// </summary>
    public const string ValueJsonPropertyName = "value";
    /// <summary>
    /// JSON property name for <see cref = "Path"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PathUtf8JsonPropertyName = new byte[]{112, 97, 116, 104};
    /// <summary>
    /// JSON property name for <see cref = "Path"/>.
    /// </summary>
    public const string PathJsonPropertyName = "path";
    /// <summary>
    /// JSON property name for <see cref = "Op"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> OpUtf8JsonPropertyName = new byte[]{111, 112};
    /// <summary>
    /// JSON property name for <see cref = "Op"/>.
    /// </summary>
    public const string OpJsonPropertyName = "op";
    /// <summary>
    /// Gets Value.
    /// </summary>
    public Corvus.Json.JsonAny Value
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ValueUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Path.
    /// </summary>
    public Corvus.Json.JsonPointer Path
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PathUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonPointer(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PathJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonPointer>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Op.
    /// </summary>
    public Corvus.Json.Patch.Model.Replace.OpEntity Op
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OpUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.Patch.Model.Replace.OpEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OpJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.Patch.Model.Replace.OpEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Replace"/>.
    /// </summary>
    public static Replace Create(Corvus.Json.JsonAny value, Corvus.Json.JsonPointer path)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(ValueJsonPropertyName, value.AsAny);
        builder.Add(PathJsonPropertyName, path.AsAny);
        builder.Add(OpJsonPropertyName, new Corvus.Json.Patch.Model.Replace.OpEntity().AsAny);
        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets value.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Replace WithValue(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(ValueJsonPropertyName, value);
    }

    /// <summary>
    /// Sets path.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Replace WithPath(in Corvus.Json.JsonPointer value)
    {
        return this.SetProperty(PathJsonPropertyName, value);
    }

    private static ImmutableDictionary<JsonPropertyName, PropertyValidator<Replace>> CreateLocalPropertyValidators()
    {
        ImmutableDictionary<JsonPropertyName, PropertyValidator<Replace>>.Builder builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, PropertyValidator<Replace>>();
        builder.Add(ValueJsonPropertyName, __CorvusValidateValue);
        builder.Add(OpJsonPropertyName, __CorvusValidateOp);
        return builder.ToImmutable();
    }

    private static ValidationContext __CorvusValidateValue(in Replace that, in ValidationContext validationContext, ValidationLevel level)
    {
        Corvus.Json.JsonAny property = that.Value;
        return property.Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateOp(in Replace that, in ValidationContext validationContext, ValidationLevel level)
    {
        Corvus.Json.Patch.Model.Replace.OpEntity property = that.Op;
        return property.Validate(validationContext, level);
    }
}