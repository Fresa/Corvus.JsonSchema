<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasDependentSchemas is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.DependentSchema should not be emitted if HasDependentSchemas is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private static readonly ImmutableDictionary<JsonPropertyName, PropertyValidator<<#= TypeDeclaration.DotnetTypeName #>>> __CorvusDependentSchema = CreateDependentSchemaValidators();
<#  foreach (var dependentSchema in DependentSchemas)
    { #>

    public bool TryAsDependentSchemaFor<#= Formatting.ToPascalCaseWithReservedWords(dependentSchema.Name).ToString() #>(out <#= dependentSchema.DotnetTypeName #> result)
    {
        if (this.HasProperty("<#= dependentSchema.Name #>"))
        {
            result = this.As<<#= dependentSchema.DotnetTypeName #>>();
            return true;
        }

        result = <#= dependentSchema.DotnetTypeName #>.Undefined;
        return false;
    }
<#  } #>

    private static ImmutableDictionary<JsonPropertyName, PropertyValidator<<#= TypeDeclaration.DotnetTypeName #>>> CreateDependentSchemaValidators()
    {
        ImmutableDictionary<JsonPropertyName, PropertyValidator<<#= TypeDeclaration.DotnetTypeName #>>>.Builder builder =
            ImmutableDictionary.CreateBuilder<JsonPropertyName, PropertyValidator<<#= TypeDeclaration.DotnetTypeName #>>>();

 <# int dsIndex = 0;
    foreach (var dependentSchema in DependentSchemas)
    {
        dsIndex++; #>
        builder.Add("<#= dependentSchema.Name #>", __CorvusValidateDependentSchema<#= dsIndex #>);
<#  } #>

        return builder.ToImmutable();
    }
<#  int dsIndexV = 0;
    foreach (var dependentSchema in DependentSchemas)
    {
        dsIndexV++; #>

    private static ValidationContext __CorvusValidateDependentSchema<#= dsIndexV #>(in <#= TypeDeclaration.DotnetTypeName #> that, in ValidationContext validationContext, ValidationLevel level)
    {
        return that.As<<#= dependentSchema.DotnetTypeName #>>().Validate(validationContext, level);
    }
<#  } #>
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasDependentSchemas;
        }
    }
#>